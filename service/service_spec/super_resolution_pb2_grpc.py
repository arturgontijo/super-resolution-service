# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from service.service_spec import super_resolution_pb2 as service_dot_service__spec_dot_super__resolution__pb2


class SuperResolutionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.increase_image_resolution = channel.unary_unary(
        '/SuperResolution/increase_image_resolution',
        request_serializer=service_dot_service__spec_dot_super__resolution__pb2.SuperResolutionRequest.SerializeToString,
        response_deserializer=service_dot_service__spec_dot_super__resolution__pb2.Image.FromString,
        )


class SuperResolutionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def increase_image_resolution(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SuperResolutionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'increase_image_resolution': grpc.unary_unary_rpc_method_handler(
          servicer.increase_image_resolution,
          request_deserializer=service_dot_service__spec_dot_super__resolution__pb2.SuperResolutionRequest.FromString,
          response_serializer=service_dot_service__spec_dot_super__resolution__pb2.Image.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'SuperResolution', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
